name: Release
permissions:
  contents: "write"
on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Create Release"]
    types:
      - "completed"
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  get-tag:
    name: "Get Tag From Package Version"
    runs-on: "ubuntu-latest"
    outputs:
      pkg-version: ${{ steps.pkg-version.outputs.PKG_VERSION }}
    steps:
      - name: "Check out the repo"
        uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ vars.RUSTC_VERSION }}
          targets: wasm32-unknown-unknown
      - uses: Swatinem/rust-cache@v2
        with:
          key: release-tag-server
          cache-all-crates: true
      #      - name: Sccache Action
      #        uses: Mozilla-Actions/sccache-action@v0.0.5
      - name: "Get tag"
        id: "pkg-version"
        shell: "bash"
        run: |
          echo PKG_VERSION=$(grep -m 1 '^version' Cargo.toml | sed -e 's/^version\s*=\s*//' | sed -e 's/"//g') >> $GITHUB_OUTPUT
  prep-env:
    name: "Prep env"
    needs:
      - "get-tag"
    strategy:
      matrix:
        include:
          - target: "x86_64-unknown-linux-gnu"
            os: "ubuntu-latest"
    #          - target: "x86_64-unknown-linux-musl"
    #            os: "ubuntu-latest"
    runs-on: ${{ matrix.os }}
    steps:
      - name: "Check out the repo"
        uses: actions/checkout@v4
      - name: "Install deps"
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config openssl libssl-dev
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ vars.RUSTC_VERSION }}
          targets: wasm32-unknown-unknown
      - name: "Cache"
        uses: Swatinem/rust-cache@v2
        with:
          key: release-upload-${{ matrix.target }}
          cache-all-crates: true
  upload-assets-manager:
    name: "Upload assets to Github releases - manager"
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    needs:
      - "prep-env"
      - "get-tag"
    strategy:
      matrix:
        include:
          - target: "x86_64-unknown-linux-gnu"
            os: "ubuntu-latest"
    runs-on: ${{ matrix.os }}
    steps:
      - name: "Check out the repo"
        uses: actions/checkout@v4
      - name: "Install deps"
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config openssl libssl-dev
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ vars.RUSTC_VERSION }}
          targets: wasm32-unknown-unknown
      - name: "Cache"
        uses: Swatinem/rust-cache@v2
        with:
          key: upload-assets-manager-${{ matrix.target }}
          cache-all-crates: true
      - name: "Build Worker"
        run: |
          cargo build --release --features jemalloc
          tar acf rust-websockets-${{ matrix.target }}.tar.gz target/release/client target/release/tungstenite-example target/release/axum-example target/release/axum-tws-example target/release/axum-example-with-ws-extractor
      - name: Release
        uses: softprops/action-gh-release@v2
        #if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: v${{ needs.get-tag.outputs.pkg-version }}
          files: |
            rust-websockets-${{ matrix.target }}.tar.gz
#  push-to-registry:
#    name: "Push Docker image to Docker Hub"
#    if: ${{ github.event.workflow_run.conclusion == 'success' }}
#    needs:
#      - "get-tag"
#      - "get-tag"
#      - "prep-env"
#      - "upload-assets-manager"
#    runs-on: "ubuntu-latest"
#    steps:
#      - name: "Check out the repo"
#        uses: actions/checkout@v4
#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v3
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3
#      - uses: dtolnay/rust-toolchain@stable
#        with:
#          toolchain: ${{ vars.RUSTC_VERSION }}
#          targets: wasm32-unknown-unknown
#      - name: "Cache"
#        uses: Swatinem/rust-cache@v2
#        with:
#          key: release-push
#          cache-all-crates: true
#      - name: "Log in to Docker Hub"
#        uses: "docker/login-action@v3"
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_TOKEN }}
#      - name: "Extract metadata (tags, labels) for Docker"
#        id: "meta"
#        uses: "docker/metadata-action@v5"
#        with:
#          images: "blockmesh/block-mesh-manager"
#      - name: "Build and push Docker image"
#        uses: "docker/build-push-action@v5"
#        with:
#          context: .
#          platforms: linux/amd64
#          file: docker/block-mesh-manager.Dockerfile
#          push: true
#          tags: blockmesh/block-mesh-manager:latest,blockmesh/block-mesh-manager:v${{ needs.get-tag.outputs.pkg-version }}
#          labels: ${{ steps.meta.outputs.labels }}
# https://codingpackets.com/blog/rust-binary-and-docker-releases-using-github-actions/